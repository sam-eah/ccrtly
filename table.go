package main

import (
	"fmt"
	"os"

	"github.com/charmbracelet/bubbles/key"
	"github.com/charmbracelet/bubbles/viewport"
	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
	"github.com/mattn/go-runewidth"
)

var baseStyle = lipgloss.NewStyle().
	BorderStyle(lipgloss.NormalBorder()).
	BorderForeground(lipgloss.Color("240"))

// Model defines a state for the table widget.
type Model struct {
	KeyMap   KeyMap
	quitting bool

	cols   []Column
	rows   []Row
	cursor Cursor
	focus  bool
	styles Styles

	viewport viewport.Model

	available map[Combo]ComboContent
	selected  map[Combo]struct{}
}

type Combo struct {
	env    string
	tenant string
}

// type FullCombo struct {
// 	env    string
// 	tenant string
// 	variables map[string]string
// }

// Row represents one line in the table.
type Row string

// Column defines the table structure.
type Column string

type Cursor struct {
	x, y int
}

// KeyMap defines keybindings. It satisfies to the help.KeyMap interface, which
// is used to render the menu.
type KeyMap struct {
	Enter     key.Binding
	Exit      key.Binding
	LineUp    key.Binding
	LineDown  key.Binding
	LineLeft  key.Binding
	LineRight key.Binding
	// GotoTop      key.Binding
	// GotoBottom   key.Binding
	ToggleCell key.Binding
	ToggleRow  key.Binding
	ToggleCol  key.Binding
	ToggleAll  key.Binding
}

// DefaultKeyMap returns a default set of keybindings.
func DefaultKeyMap() KeyMap {
	const spacebar = " "
	return KeyMap{
		Enter: key.NewBinding(
			key.WithKeys("enter"),
			key.WithHelp("enter", "enter"),
		),
		Exit: key.NewBinding(
			key.WithKeys("ctrl+c"),
			key.WithHelp("exit", "ctrl+c"),
		),
		LineUp: key.NewBinding(
			key.WithKeys("up", "k"),
			key.WithHelp("↑/k", "up"),
		),
		LineDown: key.NewBinding(
			key.WithKeys("down", "j"),
			key.WithHelp("↓/j", "down"),
		),
		LineLeft: key.NewBinding(
			key.WithKeys("left"),
			key.WithHelp("←", "left"),
		),
		LineRight: key.NewBinding(
			key.WithKeys("right", "j"),
			key.WithHelp("→", "right"),
		),
		// GotoTop: key.NewBinding(
		// 	key.WithKeys("home", "g"),
		// 	key.WithHelp("g/home", "go to start"),
		// ),
		// GotoBottom: key.NewBinding(
		// 	key.WithKeys("end", "G"),
		// 	key.WithHelp("G/end", "go to end"),
		// ),
		ToggleCell: key.NewBinding(
			key.WithKeys(spacebar),
			key.WithHelp(" ", "spacebar"),
		),
		ToggleCol: key.NewBinding(
			key.WithKeys("c"),
			key.WithHelp("c", "c"),
		),
		ToggleRow: key.NewBinding(
			key.WithKeys("r"),
			key.WithHelp("r", "r"),
		),
		ToggleAll: key.NewBinding(
			key.WithKeys("a"),
			key.WithHelp("a", "a"),
		),
	}
}

// Styles contains style definitions for this list component. By default, these
// values are generated by DefaultStyles.
type Styles struct {
	Header   lipgloss.Style
	Cell     lipgloss.Style
	Selected lipgloss.Style
}

// DefaultStyles returns a set of default style definitions for this table.
func DefaultStyles() Styles {
	return Styles{
		Selected: lipgloss.NewStyle().Bold(true).Foreground(lipgloss.Color("212")),
		Header:   lipgloss.NewStyle().Bold(true).Padding(0, 1),
		Cell:     lipgloss.NewStyle().Padding(0, 1),
	}
}

// SetStyles sets the table styles.
func (m *Model) SetStyles(s Styles) {
	m.styles = s
	m.UpdateViewport()
}

// Option is used to set options in New. For example:
//
//	table := New(WithColumns([]Column{{Title: "ID", Width: 10}}))
type Option func(*Model)

// New creates a new model for the table widget.
func New(opts ...Option) Model {
	m := Model{
		cursor:   Cursor{x: 0, y: 0},
		viewport: viewport.New(0, 0),

		KeyMap: DefaultKeyMap(),
		styles: DefaultStyles(),

		available: make(map[Combo]ComboContent),
		selected:  make(map[Combo]struct{}),
	}

	for _, opt := range opts {
		opt(&m)
	}

	m.UpdateViewport()

	return m
}

// WithColumns sets the table columns (headers).
func WithAvailable(available map[Combo]ComboContent) Option {
	return func(m *Model) {
		m.available = available
	}
}

// WithColumns sets the table columns (headers).
func WithColumns(cols []Column) Option {
	return func(m *Model) {
		m.cols = cols
	}
}

// WithRows sets the table rows (data).
func WithRows(rows []Row) Option {
	return func(m *Model) {
		m.rows = rows
	}
}

// WithFocused sets the focus state of the table.
func WithFocused(f bool) Option {
	return func(m *Model) {
		m.focus = f
	}
}

// WithStyles sets the table styles.
func WithStyles(s Styles) Option {
	return func(m *Model) {
		m.styles = s
	}
}

// WithKeyMap sets the key map.
func WithKeyMap(km KeyMap) Option {
	return func(m *Model) {
		m.KeyMap = km
	}
}

// Update is the Bubble Tea update loop.
func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	if !m.focus {
		return m, nil
	}

	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch {
		case key.Matches(msg, m.KeyMap.Exit):
			m.quitting = true
			return m, tea.Quit
		case key.Matches(msg, m.KeyMap.Enter):
			m.quitting = true
			return m, tea.Quit
		case key.Matches(msg, m.KeyMap.LineUp):
			m.MoveUp(1)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1)
		case key.Matches(msg, m.KeyMap.LineLeft):
			m.MoveLeft(1)
		case key.Matches(msg, m.KeyMap.LineRight):
			m.MoveRight(1)
		case key.Matches(msg, m.KeyMap.LineDown):
			m.MoveDown(1)
		// case key.Matches(msg, m.KeyMap.GotoTop):
		// 	m.GotoTop()
		// case key.Matches(msg, m.KeyMap.GotoBottom):
		// 	m.GotoBottom()
		case key.Matches(msg, m.KeyMap.ToggleCell):
			m.ToggleCell()
		case key.Matches(msg, m.KeyMap.ToggleCol):
			m.ToggleCol()
		case key.Matches(msg, m.KeyMap.ToggleRow):
			m.ToggleRow()
		case key.Matches(msg, m.KeyMap.ToggleAll):
			m.ToggleAll()
		}
	}

	return m, nil
}

func (m Model) Init() tea.Cmd { return nil }

// Focused returns the focus state of the table.
func (m Model) Focused() bool {
	return m.focus
}

// Focus focuses the table, allowing the user to move around the rows and
// interact.
func (m *Model) Focus() {
	m.focus = true
	m.UpdateViewport()
}

// Blur blurs the table, preventing selection or movement.
func (m *Model) Blur() {
	m.focus = false
	m.UpdateViewport()
}

// View renders the component.
func (m Model) View() string {
	view := m.headersRowView() + "\n" + m.viewport.View()
	return "\nPress space to toggle cell selection\n" +
		"Press c to toggle column selection\n" +
		"Press r to toggle row selection\n" +
		"Press a to toggle all\n" +
		"Press enter to validate\n" +
		"Press ctrl+c to quit\n\n" +
		baseStyle.Render(view) + "\n"
}

// UpdateViewport updates the list content based on the previously defined
// columns and rows.
func (m *Model) UpdateViewport() {
	renderedRows := make([]string, 0, len(m.rows))
	m.viewport.Height = len(m.rows)

	for i := 0; i < len(m.rows); i++ {
		renderedRows = append(renderedRows, m.renderRow(i))
	}

	m.viewport.SetContent(
		lipgloss.JoinVertical(lipgloss.Left, renderedRows...),
	)
}

// SelectedRow returns the selected row.
// You can cast it to your own implementation.
func (m Model) SelectedCell() Cursor {
	return m.cursor
}

// SelectedCells returns the selected cells.
func (m Model) SelectedCells() map[Combo]struct{} {
	return m.selected
}

// Rows returns the current rows.
func (m Model) Rows() []Row {
	return m.rows
}

// SetRows sets a new rows state.
func (m *Model) SetRows(r []Row) {
	m.rows = r
	m.UpdateViewport()
}

// SetColumns sets a new columns state.
func (m *Model) SetColumns(c []Column) {
	m.cols = c
	m.UpdateViewport()
}

// Cursor returns the index of the selected row.
func (m Model) Cursor() Cursor {
	return m.cursor
}

// MoveUp moves the selection up by any number of rows.
// It can not go above the first row.
func (m *Model) MoveUp(n int) {
	m.cursor.y = clamp(m.cursor.y-n, 0, len(m.rows)-1)
	m.UpdateViewport()
}

// MoveDown moves the selection down by any number of rows.
// It can not go below the last row.
func (m *Model) MoveDown(n int) {
	m.cursor.y = clamp(m.cursor.y+n, 0, len(m.rows)-1)
	m.UpdateViewport()
}

// MoveUp moves the selection up by any number of cols.
// It can not go above the first row.
func (m *Model) MoveLeft(n int) {
	m.cursor.x = clamp(m.cursor.x-n, 0, len(m.cols)-1)
	m.UpdateViewport()
}

// MoveDown moves the selection down by any number of cols.
// It can not go below the last row.
func (m *Model) MoveRight(n int) {
	m.cursor.x = clamp(m.cursor.x+n, 0, len(m.cols)-1)
	m.UpdateViewport()
}

// GotoTop moves the selection to the first row.
func (m *Model) GotoTop() {
	m.MoveUp(m.cursor.y)
}

// GotoBottom moves the selection to the last row.
func (m *Model) GotoBottom() {
	m.MoveDown(len(m.rows))
}

func (m *Model) ToggleCell() {
	combo := Combo{
		env:    string(m.cols[m.cursor.x]),
		tenant: string(m.rows[m.cursor.y]),
	}

	if _, ok := m.available[combo]; ok {
		if _, ok := m.selected[combo]; ok {
			delete(m.selected, combo)
		} else {
			m.selected[combo] = struct{}{}
		}
	}
	m.UpdateViewport()
}

// if not all selected, select all, else unselect all
func (m *Model) ToggleCol() {
	selectAll := true
	for i := range m.rows {
		if All(m.rows, func(c Row) bool {
			combo := Combo{
				env:    string(m.cols[m.cursor.x]),
				tenant: string(m.rows[i]),
			}
			_, available := m.available[combo]
			_, selected := m.selected[combo]

			return available && selected
		}) {
			selectAll = false
		}
	}
	// fmt.Println(selectAll)
	for i := range m.rows {
		combo := Combo{
			env:    string(m.cols[m.cursor.x]),
			tenant: string(m.rows[i]),
		}

		if _, ok := m.available[combo]; ok {
			if selectAll {
				m.selected[combo] = struct{}{}
			} else {
				delete(m.selected, combo)
			}
		}
	}
	m.UpdateViewport()
}

// if not all selected, select all, else unselect all
func (m *Model) ToggleRow() {
	selectAll := true
	for i := range m.cols {
		if Any(m.cols, func(c Column) bool {
			combo := Combo{
				env:    string(m.cols[i]),
				tenant: string(m.rows[m.cursor.y]),
			}
			_, available := m.available[combo]
			_, selected := m.selected[combo]

			return available && selected
		}) {
			selectAll = false
		}
	}
	// fmt.Println(selectAll)
	for i := range m.cols {
		combo := Combo{
			env:    string(m.cols[i]),
			tenant: string(m.rows[m.cursor.y]),
		}

		if _, ok := m.available[combo]; ok {
			if selectAll {
				m.selected[combo] = struct{}{}
			} else {
				delete(m.selected, combo)
			}
		}
	}
	m.UpdateViewport()
}

// if not all selected, select all, else unselect all
func (m *Model) ToggleAll() {
	selectAll := false
	for combo := range m.available {
		if _, ok := m.selected[combo]; !ok {
			selectAll = true
		}
	}

	for combo := range m.available {
		if selectAll {
			m.selected[combo] = struct{}{}
		} else {
			delete(m.selected, combo)
		}
	}
	m.UpdateViewport()
}

func (m Model) headersRowView() string {
	var s = make([]string, 0, len(m.cols))
	style := lipgloss.NewStyle().Width(20).MaxWidth(20).Inline(true)
	renderedCell := style.Render(runewidth.Truncate("", 20, "…"))
	s = append(s, m.styles.Header.Render(renderedCell))
	for _, col := range m.cols {
		style := lipgloss.NewStyle().Width(10).MaxWidth(10).Inline(true)
		renderedCell := style.Render(runewidth.Truncate(string(col), 10, "…"))
		s = append(s, m.styles.Header.Render(renderedCell))
	}
	return lipgloss.JoinHorizontal(lipgloss.Left, s...)
}

// func (m Model) headersColumnView() string {
// 	var s = make([]string, 0, len(m.cols))
// 	for _, col := range m.cols {
// 		style := lipgloss.NewStyle().Width(10).MaxWidth(10).Inline(true)
// 		renderedCell := style.Render(runewidth.Truncate(string(col), 10, "…"))
// 		s = append(s, m.styles.Header.Render(renderedCell))
// 	}
// 	return lipgloss.JoinHorizontal(lipgloss.Left, s...)
// }

func (m *Model) renderRow(rowID int) string {
	var s = make([]string, 0, len(m.cols))
	s = append(s, m.renderHeaderRowCell(rowID))
	for i := range m.cols {
		renderedCell := m.renderCell(rowID, i)
		s = append(s, renderedCell)
	}

	row := lipgloss.JoinHorizontal(lipgloss.Left, s...)

	return row
}

func (m *Model) renderCell(rowID int, colID int) string {
	style := lipgloss.NewStyle().Width(10).MaxWidth(10).Inline(true)
	cellStr := ""
	combo := Combo{
		env:    string(m.cols[colID]),
		tenant: string(m.rows[rowID]),
	}

	if _, ok := m.available[combo]; ok {
		cellStr = "[ ]"
	}

	if _, ok := m.selected[combo]; ok {
		cellStr = "[x]"
	}
	renderedCell := m.styles.Cell.Render(style.Render(runewidth.Truncate(cellStr, 10, "…")))

	if !m.quitting && (rowID == m.cursor.y && colID == m.cursor.x) {
		return m.styles.Selected.Render(renderedCell)
	}

	return renderedCell
}

func (m Model) renderHeaderRowCell(rowID int) string {
	style := lipgloss.NewStyle().Width(20).MaxWidth(20).Inline(true)
	renderedCell := m.styles.Cell.Render(style.Render(runewidth.Truncate(string(m.rows[rowID]), 20, "…")))
	return renderedCell
}

type ComboContent struct {
	filename string
	vars map[string]string
}

func initialModel(columns []Column, rows []Row, available map[Combo]ComboContent) Model {
	t := New(
		WithColumns(columns),
		WithRows(rows),
		WithFocused(true),
		WithAvailable(available),
		// WithHeight(7),
	)

	s := DefaultStyles()
	s.Header = s.Header.
		BorderStyle(lipgloss.NormalBorder()).
		BorderForeground(lipgloss.Color("240")).
		BorderBottom(true).
		Bold(false)
	s.Selected = s.Selected.
		Foreground(lipgloss.Color("229")).
		Background(lipgloss.Color("57")).
		Bold(false)
	t.SetStyles(s)

	if _, err := tea.NewProgram(t).Run(); err != nil {
		fmt.Println("Error running program:", err)
		os.Exit(1)
	}

	// fmt.Println(t.selected)

	return t
}
